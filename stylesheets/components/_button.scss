// -----------------------------------------------------------------------------
// This file contains all styles related to the button component.
// -----------------------------------------------------------------------------
//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
// Make a map with the class names and matching colors
$colors: (
  fill: #7f72cb,
  pulse: #ef6eae,
  close: #ff7f82,
  raise: #ffa260,
  up: #e4cb58,
  slide: #c866c8,
  offset: #5219bc,
);
$light-shade1: #f4f4ef;
$light-accent1: #58b1b3;
$main-brand-color1: #005908;
$dark-accent1: #5f7e94;
$dark-shade1: #181923;

// Button fills with color
.fillBtn {
  display: flex;
  justify-content: center;

  button {
    z-index: 20;
    background: none;
    border: 2px solid #000066;
    border-radius: 5px;
    // color: black;
    font: inherit;
    letter-spacing: 2px;
    line-height: 1;
    margin: 2em;
    padding: 1em 2em;
  }
}
// Animate the size, inside
.fill:hover,
.fill:focus {
  color: #ffffff;
  border: 2px solid #809fff;
  box-shadow: inset 0 0 0 2em #809fff;
  transition: ease-in-out 300ms;
}

// Button Pulses a Box Shadow
.pulseBtn {
  display: flex;
  justify-content: center;
  button {
    z-index: 20;
    background: none;
    border: 2px solid white;
    color: white;
    font: inherit;
    letter-spacing: 2px;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
  }
}
// Animate the size, outside
.pulse:hover,
.pulse:focus {
  color: #00bcd4;
  background-color: rgba(0, 0, 0, 0.4);
  border: 2px solid #00bcd4;
  animation: pulse 0.5s;
  box-shadow: 0 0 0 1em transparent;
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 #00bcd4;
  }
}

.closeBtn {
  display: flex;
  justify-content: center;
  button {
    z-index: 20;
    background: none;
    border: 2px solid white;
    color: white;
    font: inherit;
    letter-spacing: 2px;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
  }
}
// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: inset -3.5em 0 0 0 var(--hover), inset 3.5em 0 0 0 var(--hover);
}

.raiseBtn {
  display: flex;
  justify-content: center;
  button {
    z-index: 20;
    background: none;
    border: 2px solid white;
    color: white;
    font: inherit;
    letter-spacing: 2px;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
  }
}
// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {
  box-shadow: 0.3em 0.3em 0 0 var(--color), inset 0.3em 0.3em 0 0 var(--color);

  &:hover,
  &:focus {
    box-shadow: 0 0 0 0 var(--hover), inset 6em 3.5em 0 0 var(--hover);
  }
}

// Sass variables compile to a static string; CSS variables are dynamic and inherited
// Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
.button {
  color: var(--color);
  transition: 0.25s;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}
